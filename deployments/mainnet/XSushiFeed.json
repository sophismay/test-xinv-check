{
  "address": "0x8Aa3932790b33C7Cc751231161Ae5221af058D12",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IXSushiExchangeRate",
          "name": "_xSushiExchangeRate",
          "type": "address"
        },
        {
          "internalType": "contract Feed",
          "name": "_sushiFeed",
          "type": "address"
        },
        {
          "internalType": "contract Feed",
          "name": "_ethFeed",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ethFeed",
      "outputs": [
        {
          "internalType": "contract Feed",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sushiFeed",
      "outputs": [
        {
          "internalType": "contract Feed",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xSushiExchangeRate",
      "outputs": [
        {
          "internalType": "contract IXSushiExchangeRate",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5d9e73a28e30e2510ce99d9af16c165cd8e1fffd1786cb6637e8ccd808a12ef",
  "receipt": {
    "to": null,
    "from": "0x3FcB35a1CbFB6007f9BC638D388958Bc4550cB28",
    "contractAddress": "0x8Aa3932790b33C7Cc751231161Ae5221af058D12",
    "transactionIndex": 86,
    "gasUsed": "398923",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf6fb93e3a920f773e0965fdb79e1b909506bdeac8bf5f39a12a8857855dc9cda",
    "transactionHash": "0xb5d9e73a28e30e2510ce99d9af16c165cd8e1fffd1786cb6637e8ccd808a12ef",
    "logs": [],
    "blockNumber": 12153644,
    "cumulativeGasUsed": "7837404",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x851a040fC0Dcbb13a272EBC272F2bC2Ce1e11C4d",
    "0xe572CeF69f43c2E488b33924AF04BDacE19079cf",
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
  ],
  "solcInputHash": "1c95541d74a43ce344d70838c90fe18b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IXSushiExchangeRate\",\"name\":\"_xSushiExchangeRate\",\"type\":\"address\"},{\"internalType\":\"contract Feed\",\"name\":\"_sushiFeed\",\"type\":\"address\"},{\"internalType\":\"contract Feed\",\"name\":\"_ethFeed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFeed\",\"outputs\":[{\"internalType\":\"contract Feed\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sushiFeed\",\"outputs\":[{\"internalType\":\"contract Feed\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xSushiExchangeRate\",\"outputs\":[{\"internalType\":\"contract IXSushiExchangeRate\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/XSushiFeed.sol\":\"XSushiFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x6653e37ff57a02b7b7f20199bb0fd5685756ced19a67f53328b42c9d2167ffd2\"},\"contracts/XSushiFeed.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface Feed {\\n    function decimals() external view returns (uint8);\\n    function latestAnswer() external view returns (uint);\\n}\\n\\ninterface IXSushiExchangeRate {\\n    function getExchangeRate() external view returns (uint256);\\n}\\n\\ncontract XSushiFeed is Feed {\\n    using SafeMath for uint;\\n\\n    IXSushiExchangeRate public xSushiExchangeRate;\\n    Feed public sushiFeed;\\n    Feed public ethFeed;\\n\\n    constructor(IXSushiExchangeRate _xSushiExchangeRate, Feed _sushiFeed, Feed _ethFeed) public {\\n        xSushiExchangeRate = _xSushiExchangeRate;\\n        sushiFeed = _sushiFeed;\\n        ethFeed = _ethFeed;\\n    }\\n\\n    function decimals() public view returns(uint8) {\\n        return sushiFeed.decimals();\\n    }\\n\\n    function latestAnswer() public view returns (uint) {\\n        uint exchangeRate = xSushiExchangeRate.getExchangeRate();\\n        return sushiFeed.latestAnswer()\\n            .mul(ethFeed.latestAnswer())\\n            .div(10**uint256(ethFeed.decimals()))\\n            .mul(exchangeRate)\\n            .div(10**18);\\n    }\\n\\n}\",\"keccak256\":\"0x3073096c7dbdeb79eae668bf1063642a2376b29c82cd8fe6bc8a9e69b86af98d\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105a13803806105a18339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b03199182161790915560018054948416948216949094179093556002805492909116919092161790556105128061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063126cb9f21461005c578063313ce567146100805780633a328f981461009e57806350d25bcd146100a65780635e19d05c146100c0575b600080fd5b6100646100c8565b604080516001600160a01b039092168252519081900360200190f35b6100886100d7565b6040805160ff9092168252519081900360200190f35b61006461014d565b6100ae61015c565b60408051918252519081900360200190f35b61006461036c565b6000546001600160a01b031681565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561011c57600080fd5b505afa158015610130573d6000803e3d6000fd5b505050506040513d602081101561014657600080fd5b5051905090565b6001546001600160a01b031681565b60008054604080516339aa885b60e21b8152905183926001600160a01b03169163e6aa216c916004808301926020929190829003018186803b1580156101a157600080fd5b505afa1580156101b5573d6000803e3d6000fd5b505050506040513d60208110156101cb57600080fd5b50516002546040805163313ce56760e01b8152905192935061036692670de0b6b3a76400009261034e92869261035a926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d602081101561025457600080fd5b5051600254604080516350d25bcd60e01b8152905160ff909316600a0a9261034e926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d60208110156102cf57600080fd5b5051600154604080516350d25bcd60e01b815290516001600160a01b03909216916350d25bcd91600480820192602092909190829003018186803b15801561031657600080fd5b505afa15801561032a573d6000803e3d6000fd5b505050506040513d602081101561034057600080fd5b50519063ffffffff61037b16565b9063ffffffff6103dd16565b9063ffffffff61037b16565b91505090565b6002546001600160a01b031681565b60008261038a575060006103d7565b8282028284828161039757fe5b04146103d45760405162461bcd60e51b81526004018080602001828103825260218152602001806104bd6021913960400191505060405180910390fd5b90505b92915050565b60006103d483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836104a65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561046b578181015183820152602001610453565b50505050905090810190601f1680156104985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816104b257fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a723158200b90d5559383df2a9af68af534a5237df1840caa19b2cdb88c4676911815460064736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063126cb9f21461005c578063313ce567146100805780633a328f981461009e57806350d25bcd146100a65780635e19d05c146100c0575b600080fd5b6100646100c8565b604080516001600160a01b039092168252519081900360200190f35b6100886100d7565b6040805160ff9092168252519081900360200190f35b61006461014d565b6100ae61015c565b60408051918252519081900360200190f35b61006461036c565b6000546001600160a01b031681565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561011c57600080fd5b505afa158015610130573d6000803e3d6000fd5b505050506040513d602081101561014657600080fd5b5051905090565b6001546001600160a01b031681565b60008054604080516339aa885b60e21b8152905183926001600160a01b03169163e6aa216c916004808301926020929190829003018186803b1580156101a157600080fd5b505afa1580156101b5573d6000803e3d6000fd5b505050506040513d60208110156101cb57600080fd5b50516002546040805163313ce56760e01b8152905192935061036692670de0b6b3a76400009261034e92869261035a926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d602081101561025457600080fd5b5051600254604080516350d25bcd60e01b8152905160ff909316600a0a9261034e926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d60208110156102cf57600080fd5b5051600154604080516350d25bcd60e01b815290516001600160a01b03909216916350d25bcd91600480820192602092909190829003018186803b15801561031657600080fd5b505afa15801561032a573d6000803e3d6000fd5b505050506040513d602081101561034057600080fd5b50519063ffffffff61037b16565b9063ffffffff6103dd16565b9063ffffffff61037b16565b91505090565b6002546001600160a01b031681565b60008261038a575060006103d7565b8282028284828161039757fe5b04146103d45760405162461bcd60e51b81526004018080602001828103825260218152602001806104bd6021913960400191505060405180910390fd5b90505b92915050565b60006103d483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836104a65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561046b578181015183820152602001610453565b50505050905090810190601f1680156104985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816104b257fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a723158200b90d5559383df2a9af68af534a5237df1840caa19b2cdb88c4676911815460064736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35912,
        "contract": "contracts/XSushiFeed.sol:XSushiFeed",
        "label": "xSushiExchangeRate",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IXSushiExchangeRate)35905"
      },
      {
        "astId": 35914,
        "contract": "contracts/XSushiFeed.sol:XSushiFeed",
        "label": "sushiFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Feed)35899"
      },
      {
        "astId": 35916,
        "contract": "contracts/XSushiFeed.sol:XSushiFeed",
        "label": "ethFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Feed)35899"
      }
    ],
    "types": {
      "t_contract(Feed)35899": {
        "encoding": "inplace",
        "label": "contract Feed",
        "numberOfBytes": "20"
      },
      "t_contract(IXSushiExchangeRate)35905": {
        "encoding": "inplace",
        "label": "contract IXSushiExchangeRate",
        "numberOfBytes": "20"
      }
    }
  }
}